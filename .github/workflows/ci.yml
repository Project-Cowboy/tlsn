name: ci

on:
  push:
    branches:
      - dev
    tags:
      - "[v]?[0-9]+.[0-9]+.[0-9]+*"
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # We need a higher number of parallel rayon tasks than the default (which is 4)
  # in order to prevent a deadlock, c.f.
  #   - https://github.com/tlsnotary/tlsn/issues/548
  #   - https://github.com/privacy-scaling-explorations/mpz/issues/178
  # 32 seems to be big enough for the foreseeable future
  RAYON_NUM_THREADS: 32
  # these remove the need for git in notary-server build.rs:
  GIT_COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  GIT_COMMIT_TIMESTAMP: ${{ github.event.repository.pushed_at}}


jobs:
  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    container:
      # We use nightly because we need fmt's nightly `imports_granularity` feature
      image: instrumentisto/rust:nightly-slim
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Check formatting
        run: rustup component add rustfmt && cargo +nightly fmt --check --all
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    container:
      image: rust:bullseye
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: use caching
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: tell rustc about cache
        run: |
            echo "SCCACHE_ENABLED=1" >> "$GITHUB_ENV"
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
            : # https://github.com/dtolnay/rust-toolchain/issues/26
            echo "CARGO_INCREMENTAL=0" >>  $GITHUB_ENV
            : # not that we intend to use gcc, but just in case =>
            echo CCACHE=sccache >> $GITHUB_ENV
            
      - name: Clippy
        run: rustup component add clippy && cargo clippy --all-features --all-targets -- -D warnings

      - name: Build
        run: cargo build --all-targets

      - name: Test
        run: cargo test
  build-wasm:
    name: Build and test wasm
    runs-on: ubuntu-latest
    container:
      image: instrumentisto/rust:nightly-slim

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: use caching
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: tell rustc about cache
        run: |
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Install wasm target + chromedriver
        run: |
          rustup target add wasm32-unknown-unknown
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          apt update
          apt install -y chromium-driver clang

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Run tests
        run: |
          
          cd crates/wasm-test-runner 
          chmod +x run.sh && ./run.sh
      
  tests-integration:
    name: Run tests release build
    runs-on: ubuntu-latest
    container:
      image: rust:bullseye
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: use caching
        uses: mozilla-actions/sccache-action@v0.0.6
      - name: tell rustc about cache
        run: |
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Add custom DNS entry to /etc/hosts for notary TLS test
        run: echo "127.0.0.1 tlsnotaryserver.io" | tee -a /etc/hosts

      - name: Run integration tests
        run: cargo test --profile tests-integration --workspace --exclude tlsn-tls-client --exclude tlsn-tls-core -- --include-ignored
  coverage:
    runs-on: ubuntu-latest
    container:
      image: rust:bullseye
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: true
