name: Test Gramine in SGX Simulation Mode

on:
  pull_request:

env:
  GIT_COMMIT_HASH: ${{ github.event.pull_request.head.sha || github.sha }}
  GIT_COMMIT_TIMESTAMP: ${{ github.event.repository.updated_at}}

jobs:
  rust_build:
    runs-on: ubuntu-latest
    container:
      image: rust:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Clang
        run: |
          apt update
          apt install -y clang

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: rust-cache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust-cache-${{ runner.os }}-

      - name: Build Rust Binary
        run: |
          pwd
          cargo build --bin notary-server  --release --features tee_quote
          find . -iname "notary-server"
          cp --verbose target/release/notary-server $GITHUB_WORKSPACE

      - name: Upload Binary for Next Job
        uses: actions/upload-artifact@v4
        with:
          name: notary-server
          path: notary-server
          if-no-files-found: error
          retention-days: 1  # Auto-delete after 1 day, no need to keep it around because it is part of the zipfile b

  gramine_sim:
    runs-on: ubuntu-latest
    needs: rust_build
    environment: tee
    container:
      image: gramineproject/gramine:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Restore SGX signing key
        run: |
          mkdir -p /root/.config/gramine
          echo "${{ secrets.SGX_SIGNING_KEY }}" > "${HOME}/.config/gramine/enclave-key.pem"
          # verify key
          file "${HOME}/.config/gramine/enclave-key.pem"
          openssl rsa -in "${HOME}/.config/gramine/enclave-key.pem" -check -noout

      - name: Download notary-server binary
        uses: actions/download-artifact@v4
        with:
          name: notary-server
          path: crates/notary/server/tee

      - name: Install jq
        run: |
          apt update
          apt install -y jq

      - name: Run notary-server in Gramine
        run: |
          cd crates/notary/server/tee

          gramine-manifest \
            -Dlog_level=debug \
            -Darch_libdir=/lib/x86_64-linux-gnu \
            -Dself_exe=notary-server \
            notary-server.manifest.template \
            notary-server.manifest

          gramine-sgx-sign \
            --manifest notary-server.manifest \
            --output notary-server.manifest.sgx

          gramine-sgx-sigstruct-view --verbose --output-format=json notary-server.sig | tee >> notary-server-sigstruct.json

          mr_enclave=$(gramine-sgx-sigstruct-view --verbose --output-format=json notary-server.sig | jq .mr_enclave)
          echo "mrenclave=$mr_enclave" >>"$GITHUB_OUTPUT"
          echo "#### sgx mrenclave" | tee >>$GITHUB_STEP_SUMMARY
          echo "\`\`\`${mr_enclave}\`\`\`" | tee >>$GITHUB_STEP_SUMMARY

          # gramine-sgx $GITHUB_WORKSPACE/tlsn/crates/notary/server/tee/notary-server
      - name: Upload Binary for Next Job
        uses: actions/upload-artifact@v4
        with:
          name: notary-server-sgx.zip
          path: |
            crates/notary/server/tee/notary-server
            crates/notary/server/tee/notary-server-sigstruct.json
            crates/notary/server/tee/notary-server.*
            crates/notary/server/tee/notary-server/config
          if-no-files-found: error